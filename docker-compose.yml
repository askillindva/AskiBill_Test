version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: askibill-postgres
    environment:
      POSTGRES_DB: askibill
      POSTGRES_USER: askibill_user
      POSTGRES_PASSWORD: secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - askibill-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: askibill-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - askibill-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: askibill-backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://askibill_user:secure_password_123@postgres:5432/askibill
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=production
      - ALLOWED_ORIGINS=http://localhost:3000,https://yourdomain.com
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"
    networks:
      - askibill-network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Web Frontend (Optional - for web deployment)
  frontend-web:
    build:
      context: ./frontend-web
      dockerfile: Dockerfile
    container_name: askibill-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - askibill-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: askibill-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend-web
    networks:
      - askibill-network
    restart: unless-stopped

  # Background Worker (Celery)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: askibill-worker
    command: celery -A app.worker worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://askibill_user:secure_password_123@postgres:5432/askibill
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
    depends_on:
      - postgres
      - redis
    networks:
      - askibill-network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads

  # Celery Beat Scheduler
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: askibill-scheduler
    command: celery -A app.worker beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://askibill_user:secure_password_123@postgres:5432/askibill
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
    depends_on:
      - postgres
      - redis
    networks:
      - askibill-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  askibill-network:
    driver: bridge